# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from det_service_lab/DeterminantCounterServRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class DeterminantCounterServRequest(genpy.Message):
  _md5sum = "76bc77bacade00ac116d8d7c449a7fb9"
  _type = "det_service_lab/DeterminantCounterServRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 a11
float32 a12
float32 a13
float32 a21
float32 a22
float32 a23
float32 a31
float32 a32
float32 a33
"""
  __slots__ = ['a11','a12','a13','a21','a22','a23','a31','a32','a33']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       a11,a12,a13,a21,a22,a23,a31,a32,a33

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DeterminantCounterServRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.a11 is None:
        self.a11 = 0.
      if self.a12 is None:
        self.a12 = 0.
      if self.a13 is None:
        self.a13 = 0.
      if self.a21 is None:
        self.a21 = 0.
      if self.a22 is None:
        self.a22 = 0.
      if self.a23 is None:
        self.a23 = 0.
      if self.a31 is None:
        self.a31 = 0.
      if self.a32 is None:
        self.a32 = 0.
      if self.a33 is None:
        self.a33 = 0.
    else:
      self.a11 = 0.
      self.a12 = 0.
      self.a13 = 0.
      self.a21 = 0.
      self.a22 = 0.
      self.a23 = 0.
      self.a31 = 0.
      self.a32 = 0.
      self.a33 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_9f().pack(_x.a11, _x.a12, _x.a13, _x.a21, _x.a22, _x.a23, _x.a31, _x.a32, _x.a33))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.a11, _x.a12, _x.a13, _x.a21, _x.a22, _x.a23, _x.a31, _x.a32, _x.a33,) = _get_struct_9f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_9f().pack(_x.a11, _x.a12, _x.a13, _x.a21, _x.a22, _x.a23, _x.a31, _x.a32, _x.a33))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.a11, _x.a12, _x.a13, _x.a21, _x.a22, _x.a23, _x.a31, _x.a32, _x.a33,) = _get_struct_9f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9f = None
def _get_struct_9f():
    global _struct_9f
    if _struct_9f is None:
        _struct_9f = struct.Struct("<9f")
    return _struct_9f
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from det_service_lab/DeterminantCounterServResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class DeterminantCounterServResponse(genpy.Message):
  _md5sum = "6bb9c80a49044a815006ce46b540ce50"
  _type = "det_service_lab/DeterminantCounterServResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 det

"""
  __slots__ = ['det']
  _slot_types = ['float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       det

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DeterminantCounterServResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.det is None:
        self.det = 0.
    else:
      self.det = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.det
      buff.write(_get_struct_f().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.det,) = _get_struct_f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.det
      buff.write(_get_struct_f().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.det,) = _get_struct_f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
class DeterminantCounterServ(object):
  _type          = 'det_service_lab/DeterminantCounterServ'
  _md5sum = '3e8a6a602544480a67a9f07dbdeee698'
  _request_class  = DeterminantCounterServRequest
  _response_class = DeterminantCounterServResponse
